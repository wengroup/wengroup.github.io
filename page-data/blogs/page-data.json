{
    "componentChunkName": "component---src-pages-blogs-index-js",
    "path": "/blogs/",
    "result": {"data":{"allMarkdownRemark":{"nodes":[{"html":"<h1>Create a potential</h1>\n<p>This is an answer I prepared for the below Matter Modeling questions:</p>\n<ul>\n<li><a href=\"https://mattermodeling.stackexchange.com/questions/8932/what-are-the-open-source-or-software-code-that-can-generate-potentials\">What are the open source or software code that can generate potentials?</a></li>\n<li><a href=\"https://mattermodeling.stackexchange.com/questions/8868/are-there-any-open-source-codes-that-can-generate-lammps-potentials-from-dft-cal\">Are there any open source codes that can generate LAMMPS potentials from DFT calculations?</a></li>\n</ul>\n<p>But unfortunately, I do not have the privilege to provide an answer with more than 10 links. So, here it is.</p>\n<hr>\n<p>There are different flavors of interatomic potentials, from the classical Lennard-Jones and Morse models to more recent machine learning models. I will limit the answer to reactive potential models without considering bonded force fields.</p>\n<h2>Check existing potentials repository</h2>\n<p>Before fitting a new model, first try searching the repositories</p>\n<ul>\n<li>OpenKIM (<a href=\"https://openkim.org\">https://openkim.org</a>)</li>\n<li>NIST (<a href=\"https://www.ctcms.nist.gov/potentials/\">https://www.ctcms.nist.gov/potentials/</a>)</li>\n</ul>\n<p>to see whether you can find one that satisfies your needs.\nVia the KIM API (<a href=\"https://openkim.org/kim-api\">https://openkim.org/kim-api</a>), models archived on OpenKIM can be used in various molecular simulation codes, such as LAMMPS, ASE, DL_POLY, GULP, and ASAP. OpenKIM also provides analysis of each model (e.g. citation analysis and tests on canonical properties like cohesive energy and elastic constant), which may help you to decide whether a model satisfies your need. For an example, see <a href=\"https://openkim.org/id/EAM_Dynamo_Ackland_1992_Ti__MO_748534961139_005\">https://openkim.org/id/EAM_Dynamo_Ackland_1992_Ti__MO_748534961139_005</a>.</p>\n<h2>Build new potentials</h2>\n<p>If none satisfies the need, there are basically three steps to create a new model.</p>\n<h3>Assemble a dataset</h3>\n<p>Traditionally, potentials are fit to reproduce a set of experimental properties, but nowadays most potentials are fit to more easily obtainable properties from quantum mechanical calculations.</p>\n<p>Here are some DFT codes that can be used to generate a dataset of energy, forces, and stress for training the model.</p>\n<ul>\n<li>Quantum Espresso (open source) <a href=\"https://www.quantum-espresso.org\">https://www.quantum-espresso.org</a></li>\n<li>VASP (commercial) <a href=\"https://www.vasp.at\">https://www.vasp.at</a></li>\n<li>ABINIT (open source) <a href=\"https://www.abinit.org\">https://www.abinit.org</a></li>\n<li>SIESTA (open source) <a href=\"https://departments.icmab.es/leem/siesta/\">https://departments.icmab.es/leem/siesta/</a></li>\n<li>CP2K (open source) <a href=\"https://www.cp2k.org\">https://www.cp2k.org</a></li>\n</ul>\n<p>If you do not want to generate a dataset by yourself, some computational materials databases may have DFT data that can be used for fitting a potential, such as</p>\n<ul>\n<li>The Materials Project <a href=\"https://materialsproject.org\">https://materialsproject.org</a></li>\n<li>AFLOW <a href=\"http://www.aflowlib.org\">http://www.aflowlib.org</a></li>\n<li>OQMD <a href=\"https://oqmd.org\">https://oqmd.org</a></li>\n<li>NOMAD <a href=\"https://nomad-lab.eu\">https://nomad-lab.eu</a></li>\n<li>JARVIS <a href=\"https://jarvis.nist.gov\">https://jarvis.nist.gov</a></li>\n</ul>\n<h3>Train the model</h3>\n<p>Given a dataset, many open-source codes can be used to fit a potential. Below are some widely used ones, and I categorize them into codes that build physics-based models (e.g. Tersoff) or build machine learning models (e.g. neural network).</p>\n<h4>Physics based</h4>\n<ul>\n<li>potfit <a href=\"https://www.potfit.net/wiki/doku.php\">https://www.potfit.net/wiki/doku.php</a></li>\n<li>KLIFF <a href=\"https://github.com/openkim/kliff\">https://github.com/openkim/kliff</a></li>\n<li>atomicrex <a href=\"https://www.atomicrex.org\">https://www.atomicrex.org</a></li>\n</ul>\n<h4>Machine learning</h4>\n<ul>\n<li>KLIFF (general purpose) <a href=\"https://github.com/openkim/kliff\">https://github.com/openkim/kliff</a></li>\n<li>MAML (general purpose) <a href=\"https://github.com/materialsvirtuallab/maml\">https://github.com/materialsvirtuallab/maml</a></li>\n<li>GAP (Gaussian approximation potential) <a href=\"https://libatoms.github.io\">https://libatoms.github.io</a></li>\n<li>MTP (Moment tensor potential) <a href=\"https://mlip.skoltech.ru\">https://mlip.skoltech.ru</a></li>\n<li>SNAP (Spectral neighbor analysis potential) <a href=\"https://github.com/FitSNAP/FitSNAP\">https://github.com/FitSNAP/FitSNAP</a></li>\n<li>PANNA (Behler--Parrinello type neural network) <a href=\"https://gitlab.com/PANNAdevs/panna\">https://gitlab.com/PANNAdevs/panna</a></li>\n<li>AMP (Behler--Parrinello type neural network) <a href=\"https://bitbucket.org/andrewpeterson/amp\">https://bitbucket.org/andrewpeterson/amp</a></li>\n<li>aenet (Behler--Parrinello type neural network) <a href=\"http://ann.atomistic.net\">http://ann.atomistic.net</a></li>\n<li>DeePMD <a href=\"https://github.com/deepmodeling/deepmd-kit\">https://github.com/deepmodeling/deepmd-kit</a></li>\n<li>SchNet (graph neural network) <a href=\"https://github.com/atomistic-machine-learning/schnetpack\">https://github.com/atomistic-machine-learning/schnetpack</a></li>\n<li>NequIP (equivariant graph neural network) <a href=\"https://github.com/mir-group/nequip\">https://github.com/mir-group/nequip</a></li>\n</ul>\n<h3>Deploy the model</h3>\n<p>Most of the fitting codes listed above do have an interface to either LAMMPS or ASE, or both. So deploying the fitted model for simulation is typically not a problem. PANNA, potfit, and KLIFF have interfaces to the KIM API, and potentials created with them can be used in multiple simulation codes.</p>","id":"c044c2a3-bc0c-5480-9ed8-80362b7c296e","headings":[{"depth":1,"value":"Create a potential"},{"depth":2,"value":"Check existing potentials repository"},{"depth":2,"value":"Build new potentials"},{"depth":3,"value":"Assemble a dataset"},{"depth":3,"value":"Train the model"},{"depth":4,"value":"Physics based"},{"depth":4,"value":"Machine learning"},{"depth":3,"value":"Deploy the model"}],"frontmatter":{"title":"Fit a new potential","slug":"fit_new_potential","date":"April 19th, 2022","stack":["Interatomic potentials","Fitting","Machine learning","KLIFF","LAMMPS","KIM API","OpenKIM"],"description":"Steps to create a new interatomic potential model."}},{"html":"<p>{\ntype: 'root',\nchildren: [\n{\ntype: 'heading',\ndepth: 2,\nchildren: [\n{type: 'text', value: 'Hello, '},\n{\ntype: 'emphasis',\nchildren: [{type: 'text', value: 'World'}]\n},\n{type: 'text', value: '!'}\n]\n}\n]\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\n## API\n\nThis package exports the following identifier: `fromMarkdown`.\nThere is no default export.\n\nThe export map supports the endorsed\n[`development` condition](https://nodejs.org/api/packages.html#packages_resolving_user_conditions).\nRun `node --conditions development module.js` to get instrumented dev code.\nWithout this condition, production code is loaded.\n\n### `fromMarkdown(doc[, encoding][, options])`\n\nParse markdown to a **[mdast][]** tree.\n\n##### Parameters\n\n###### `doc`\n\nValue to parse (`string` or [`Buffer`][buffer]).\n\n###### `encoding`\n\n[Character encoding][encoding] to understand `doc` as when it’s a\n[`Buffer`][buffer] (`string`, default: `'utf8'`).\n\n###### `options.extensions`\n\nArray of syntax extensions (`Array&lt;MicromarkSyntaxExtension>`, default: `[]`).\nPassed to [`micromark` as `extensions`][micromark-extensions].\n\n###### `options.mdastExtensions`\n\nArray of mdast extensions (`Array&lt;MdastExtension>`, default: `[]`).\n\n##### Returns\n\n[`Root`][root].\n\n## List of extensions\n\n*   [`syntax-tree/mdast-util-directive`](https://github.com/syntax-tree/mdast-util-directive)\n    — parse directives\n*   [`syntax-tree/mdast-util-frontmatter`](https://github.com/syntax-tree/mdast-util-frontmatter)\n    — parse frontmatter (YAML, TOML, more)\n*   [`syntax-tree/mdast-util-gfm`](https://github.com/syntax-tree/mdast-util-gfm)\n    — parse GFM\n*   [`syntax-tree/mdast-util-gfm-autolink-literal`](https://github.com/syntax-tree/mdast-util-gfm-autolink-literal)\n    — parse GFM autolink literals\n*   [`syntax-tree/mdast-util-gfm-footnote`](https://github.com/syntax-tree/mdast-util-gfm-footnote)\n    — parse GFM footnotes\n*   [`syntax-tree/mdast-util-gfm-strikethrough`](https://github.com/syntax-tree/mdast-util-gfm-strikethrough)\n    — parse GFM strikethrough\n*   [`syntax-tree/mdast-util-gfm-table`](https://github.com/syntax-tree/mdast-util-gfm-table)\n    — parse GFM tables\n*   [`syntax-tree/mdast-util-gfm-task-list-item`](https://github.com/syntax-tree/mdast-util-gfm-task-list-item)\n    — parse GFM task list items\n*   [`syntax-tree/mdast-util-math`](https://github.com/syntax-tree/mdast-util-math)\n    — parse math\n*   [`syntax-tree/mdast-util-mdx`](https://github.com/syntax-tree/mdast-util-mdx)\n    — parse MDX or MDX.js\n*   [`syntax-tree/mdast-util-mdx-expression`](https://github.com/syntax-tree/mdast-util-mdx-expression)\n    — parse MDX or MDX.js expressions\n*   [`syntax-tree/mdast-util-mdx-jsx`](https://github.com/syntax-tree/mdast-util-mdx-jsx)\n    — parse MDX or MDX.js JSX\n*   [`syntax-tree/mdast-util-mdxjs-esm`](https://github.com/syntax-tree/mdast-util-mdxjs-esm)\n    — parse MDX.js ESM\n\n## Security\n\nAs markdown is sometimes used for HTML, and improper use of HTML can open you up\nto a [cross-site scripting (XSS)][xss] attack, use of `mdast-util-from-markdown`\ncan also be unsafe.\nWhen going to HTML, use this utility in combination with\n[`hast-util-sanitize`][sanitize] to make the tree safe.\n\n## Related\n\n*   [`micromark/micromark`](https://github.com/micromark/micromark)\n    — the smallest commonmark-compliant markdown parser that exists\n*   [`remarkjs/remark`](https://github.com/remarkjs/remark)\n    — markdown processor powered by plugins\n*   [`syntax-tree/mdast-util-to-markdown`](https://github.com/syntax-tree/mdast-util-to-markdown)\n    — serialize mdast to markdown\n\n## Contribute\n\nSee [`contributing.md` in `syntax-tree/.github`][contributing] for ways to get\nstarted.\nSee [`support.md`][support] for ways to get help.\n\nThis project has a [code of conduct][coc].\nBy interacting with this repository, organization, or community you agree to\nabide by its terms.\n\n## License\n\n[MIT][license] © [Titus Wormer][author]\n\n&lt;!-- Definitions -->\n\n[build-badge]: https://github.com/syntax-tree/mdast-util-from-markdown/workflows/main/badge.svg\n\n[build]: https://github.com/syntax-tree/mdast-util-from-markdown/actions\n\n[coverage-badge]: https://img.shields.io/codecov/c/github/syntax-tree/mdast-util-from-markdown.svg\n\n[coverage]: https://codecov.io/github/syntax-tree/mdast-util-from-markdown\n\n[downloads-badge]: https://img.shields.io/npm/dm/mdast-util-from-markdown.svg\n\n[downloads]: https://www.npmjs.com/package/mdast-util-from-markdown\n\n[size-badge]: https://img.shields.io/bundlephobia/minzip/mdast-util-from-markdown.svg\n\n[size]: https://bundlephobia.com/result?p=mdast-util-from-markdown\n\n[sponsors-badge]: https://opencollective.com/unified/sponsors/badge.svg\n\n[backers-badge]: https://opencollective.com/unified/backers/badge.svg\n\n[collective]: https://opencollective.com/unified\n\n[chat-badge]: https://img.shields.io/badge/chat-discussions-success.svg\n\n[chat]: https://github.com/syntax-tree/unist/discussions\n\n[npm]: https://docs.npmjs.com/cli/install\n\n[license]: license\n\n[author]: https://wooorm.com\n\n[contributing]: https://github.com/syntax-tree/.github/blob/HEAD/contributing.md\n\n[support]: https://github.com/syntax-tree/.github/blob/HEAD/support.md\n\n[coc]: https://github.com/syntax-tree/.github/blob/HEAD/code-of-conduct.md\n\n[mdast]: https://github.com/syntax-tree/mdast\n\n[root]: https://github.com/syntax-tree/mdast#root\n\n[encoding]: https://nodejs.org/api/buffer.html#buffer_buffers_and_character_encodings\n\n[buffer]: https://nodejs.org/api/buffer.html\n\n[xss]: https://en.wikipedia.org/wiki/Cross-site_scripting\n\n[sanitize]: https://github.com/syntax-tree/hast-util-sanitize\n\n[micromark]: https://github.com/micromark/micromark\n\n[micromark-extensions]: https://github.com/micromark/micromark#optionsextensions\n\n[remark]: https://github.com/remarkjs/remark</code></pre></div>","id":"1fb2e0d9-d10e-5972-9e6c-975aba810c76","headings":[],"frontmatter":{"title":"The Dojo Coffee House","slug":"house","date":"January 4th, 2022","stack":["HTML","CSS"],"description":"Next you could create a page component at src/pages/blog/index.js to serve as a listing page for all your blog posts.This should get you started on some basic Markdown functionality in your Gatsby site. You can further customize the frontmatter and the component file to get desired effects!"}},{"html":"<p>Say we have the following markdown file, <code class=\"language-text\">example.md</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\"><span class=\"token title important\"><span class=\"token punctuation\">##</span> Hello, *World*!</span></code></pre></div>\n<p>And our script, <code class=\"language-text\">example.js</code>, looks as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> fs <span class=\"token keyword\">from</span> <span class=\"token string\">'node:fs'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>fromMarkdown<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'mdast-util-from-markdown'</span>\n\n<span class=\"token keyword\">const</span> doc <span class=\"token operator\">=</span> fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFileSync</span><span class=\"token punctuation\">(</span><span class=\"token string\">'example.md'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> tree <span class=\"token operator\">=</span> <span class=\"token function\">fromMarkdown</span><span class=\"token punctuation\">(</span>doc<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Now, running <code class=\"language-text\">node example</code> yields (positional info removed for brevity):</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>","id":"6b21a9d7-d301-5247-9c29-040245b55a0b","headings":[],"frontmatter":{"title":"Skateboards2Go","slug":"skateboards","date":"February 3rd, 2021","stack":["Vue","Firebase"],"description":"Next you could create a page component at src/pages/blog/index.js to serve as a listing page for all your blog posts.This should get you started on some basic Markdown functionality in your Gatsby site. You can further customize the frontmatter and the component file to get desired effects!"}},{"html":"<h1>github-markdown-css</h1>\n<blockquote>\n<p>The minimal amount of CSS to replicate the GitHub Markdown style</p>\n</blockquote>\n<p><strong>The CSS is generated. Contributions should go to <a href=\"https://github.com/sindresorhus/generate-github-markdown-css\">this repo</a>.</strong></p>\n<p><a href=\"http://sindresorhus.com/github-markdown-css\"><img src=\"https://cloud.githubusercontent.com/assets/170270/5219062/f22a978c-7685-11e4-8316-af25b6c89bc0.png\" width=\"300\"></a></p>\n<h2><a href=\"https://sindresorhus.com/github-markdown-css\">Demo</a></h2>\n<h2>Install</h2>\n<p>Download <a href=\"https://raw.githubusercontent.com/sindresorhus/github-markdown-css/gh-pages/github-markdown.css\">manually</a>, from <a href=\"https://cdnjs.com/libraries/github-markdown-css\">CDNJS</a>, or with npm:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ npm install github-markdown-css</code></pre></div>\n<h2>Usage</h2>\n<p>Import the <code class=\"language-text\">github-markdown.css</code> file and add a <code class=\"language-text\">markdown-body</code> class to the container of your rendered Markdown and set a width for it. GitHub uses <code class=\"language-text\">980px</code> width and <code class=\"language-text\">45px</code> padding, and <code class=\"language-text\">15px</code> padding for mobile.</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>github-markdown.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\">\n\t<span class=\"token selector\">.markdown-body</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token property\">box-sizing</span><span class=\"token punctuation\">:</span> border-box<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 980px<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 auto<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 45px<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">max-width</span><span class=\"token punctuation\">:</span> 767px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token selector\">.markdown-body</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>article</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>markdown-body<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Unicorns<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>All the things<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>article</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>If you want code syntax highlighted, use GitHub Flavored Markdown rendered from <a href=\"https://docs.github.com/en/free-pro-team@latest/rest/reference/markdown\">GitHub's <code class=\"language-text\">/markdown</code> API</a>.</p>\n<p>There are 3 themes provided in this package:</p>\n<ul>\n<li><strong>github-markdown.css</strong>: (default) Automatically switches between light and dark through <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\"><code class=\"language-text\">@media (prefers-color-scheme)</code></a>.</li>\n<li><strong>github-markdown-light.css</strong>: Light-only.</li>\n<li><strong>github-markdown-dark.css</strong>: Dark-only.</li>\n</ul>\n<p>You may know that now GitHub supports more than 2 themes including <code class=\"language-text\">dark_dimmed</code>, <code class=\"language-text\">dark_high_contrast</code> and <code class=\"language-text\">colorblind</code> variants. If you want to try these themes, you can generate them on your own! See next section.</p>\n<h2>How</h2>\n<p>See <a href=\"https://github.com/sindresorhus/generate-github-markdown-css\"><code class=\"language-text\">generate-github-markdown-css</code></a> for how it's generated and ability to generate your own.</p>\n<h2>Dev</h2>\n<p>Run <code class=\"language-text\">npm run make</code> to update the CSS.</p>","id":"5437d236-7962-5eda-b0bc-4b42cfbe9f16","headings":[{"depth":1,"value":"github-markdown-css"},{"depth":2,"value":"Demo"},{"depth":2,"value":"Install"},{"depth":2,"value":"Usage"},{"depth":2,"value":"How"},{"depth":2,"value":"Dev"}],"frontmatter":{"title":"The Dojo Coffee House","slug":"hou","date":"January 5th, 2022","stack":["HTML","CSS"],"description":"Next you could create a page component at src/pages/blog/index.js to serve as a listing page for all your blog posts.This should get you started on some basic Markdown functionality in your Gatsby site. You can further customize the frontmatter and the component file to get desired effects!"}},{"html":"<h1>Update (June 10, 2019)</h1>\n<p>We have implemented DRIP as a LAMMPS built-in model, and it is available since\nthe <code class=\"language-text\">5Jun19</code> version. Note</p>\n<ul>\n<li>It is in the <code class=\"language-text\">USER-MISC</code> package, so you need to add it when installing LAMMPS</li>\n<li>Examples at <code class=\"language-text\">lammps/examples/USER/misc/drip/</code> or you can find it\n<a href=\"https://github.com/lammps/lammps/tree/master/examples/USER/misc/drip\">here</a></li>\n<li>Google <code class=\"language-text\">lammps pair drip</code> to get documentation</li>\n</ul>\n<hr>\n<hr>\n<h1>Original post (March 10, 2019)</h1>\n<p>The <code class=\"language-text\">DRIP (Dihedral-angle-corrected registry-dependent interlayer potential)</code>\nprovides an improved description of the interlayer interactions for multilayer\ngraphene structures.\nSee <a href=\"https://doi.org/10.1103/physrevb.98.235404\">our paper</a> for more information\nabout it. We have implemented the <code class=\"language-text\">DRIP</code> as a KIM model.\nTo use it, follow the below instructions.</p>\n<h2>KIM-API</h2>\n<p>Follow <a href=\"https://openkim.org/kim-api/\">https://openkim.org/kim-api/</a> to install <code class=\"language-text\">kim-api-v2-2.0.0</code>.</p>\n<p>The instructions given there assume you have root access and install the API to\n<code class=\"language-text\">/usr/local</code>.\nIf you do not have root access or want to install to another directory, follow\n<code class=\"language-text\">INSTALL</code> in the <code class=\"language-text\">kim-api-v2-2.0.0</code> package.</p>\n<p>Note, if you chose not to install the <code class=\"language-text\">kim-api-v2-2.0.0</code> package in the standard\nlocation, you will need to get the kim-api library on <code class=\"language-text\">PATH</code> by doing some thing\nlike (assume you are using <code class=\"language-text\">Bash</code>):</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">source</span> activate path/to/the/installed/kim-api/library/bin/kim-api-v2-activate</code></pre></div>\n<h2>DRIP driver and model</h2>\n<p>The <code class=\"language-text\">DRIP</code> driver and model can be obtained from my <a href=\"https://github.com/mjwen\">GitHub</a>.\nThe \"v2.0.0\" branch of both the driver and model is compatible with <code class=\"language-text\">kim-api-v2-2.0.0</code>.\nBelow is a quick way to install them.</p>\n<h3>install the driver</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone --branch v2.0.0 https://github.com/mjwen/DRIP_WenTadmor__MD_000000111111_000.git\n$ kim-api-v2-collections-management <span class=\"token function\">install</span> user ./DRIP_WenTadmor__MD_000000111111_000</code></pre></div>\n<h3>install the model</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">git</span> clone --branch v2.0.0 https://github.com/mjwen/DRIP_WenTadmor_2018_C__MO_000000111111_000.git\n$ kim-api-v2-collections-management <span class=\"token function\">install</span> user ./DRIP_WenTadmor_2018_C__MO_000000111111_000</code></pre></div>\n<p>To check that the driver and model are successfully installed, do:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ kim-api-v2-collections-management list</code></pre></div>\n<p>You should be able to see\n<code class=\"language-text\">DRIP_WenTadmor__MD_000000111111_000</code> and <code class=\"language-text\">DRIP_WenTadmor_2018_C__MO_000000111111_000</code>.\nin the <code class=\"language-text\">User Collection</code>.</p>\n<h2>LAMMPS (optional)</h2>\n<p>To use KIM with LAMMPS, you will need <code class=\"language-text\">pair_kim</code>.\nFor now please put <a href=\"https://mjwen.github.io/files/pair_kim.cpp\">pair_kim.cpp</a>\nand <a href=\"https://mjwen.github.io/files/pair_kim.h\">pair_kim.h</a> into your LAMMPS\n<code class=\"language-text\">src</code> directory (we have made pull request to LAMMPS and the next official\nrelease of LAMMPS will be compatible with KIM), and then make LAMMPS the usual\nway you do.</p>\n<p><code class=\"language-text\">pair_kim</code> now only supports <code class=\"language-text\">atom_style atomic</code>, so please use it in your\nLAMMPS input script.\n<code class=\"language-text\">DRIP</code> only provides the interlayer interactions, so if you want to use it\ntogether with a potential that provides the intralayer interaction (<code class=\"language-text\">REBO</code> for\nexample), you can use the <code class=\"language-text\">hybrid/overlay</code> pair style and put in the LAMMPS\nscript the following lines:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">pair_style   hybrid/overlay kim DRIP_WenTadmor_2018_C__MO_000000111111_000 rebo\npair_coeff   * * kim C\npair_coeff   * * rebo CH.airebo C</code></pre></div>\n<p>Note, we implement the <code class=\"language-text\">DRIP</code> potential in KIM using a different approach from\nthe <code class=\"language-text\">KC</code> potential in LAMMPS.\nIn the KIM implementation of <code class=\"language-text\">DRIP</code>, we have a method to separate the simulation\nconfiguration into layers automatically.\nSo there is no need to assign atoms into different molecules as the LAMMPS <code class=\"language-text\">KC</code>\nimplementation.</p>","id":"c908a0ba-a363-5972-8c03-afda3ef1b207","headings":[{"depth":1,"value":"Update (June 10, 2019)"},{"depth":1,"value":"Original post (March 10, 2019)"},{"depth":2,"value":"KIM-API"},{"depth":2,"value":"DRIP driver and model"},{"depth":3,"value":"install the driver"},{"depth":3,"value":"install the model"},{"depth":2,"value":"LAMMPS (optional)"}],"frontmatter":{"title":"Use the DRIP potential","slug":"use_drip_potential","date":"March 10th, 2019","stack":["DRIP","Potential"],"description":"Use the DRIP potential in LAMMPS."}}]}},"pageContext":{}},
    "staticQueryHashes": ["1501766088"]}